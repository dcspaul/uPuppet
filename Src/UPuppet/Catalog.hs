{------------------------------------------------------------------------------
    uPuppet: Catalog
------------------------------------------------------------------------------}

module UPuppet.Catalog ( Name, Attri, ScopedCatalog, Catalog, CatalogResource, lookupCat, updateCat, scopedCatToCat) where

import UPuppet.AST
import UPuppet.Scoping

{------------------------------------------------------------------------------
    Catalog
------------------------------------------------------------------------------}

-- the catalog is generated by Eval.hs & consumed by ShowCatalog.hs

type Attri = String
type CatalogResource = (Name, Name, [(Attri, Value)])
type Catalog = [CatalogResource]
type ScopedCatalog = [(Scope, CatalogResource)]

lookforAtt :: [(Attri, Value)] -> String -> ValueExp
lookforAtt [] _                        = error "lookforAtt"
lookforAtt ((r, v):rs) att | r == att  = DeRef (Values v)
                           | otherwise = (lookforAtt rs att)

lookupCat :: ScopedCatalog -> String -> String -> String -> ValueExp
lookupCat [] _ _ _                                         = error "lookupCat"
lookupCat ((_, (r, rn, rs)):cs) s n att | ((r==s)&&(rn==n)) = (lookforAtt rs att)
                                        | otherwise         = (lookupCat cs s n att)

updateCat :: ScopedCatalog -> (Scope, CatalogResource) -> DefEnv -> ScopedCatalog
updateCat [] (sco, (t, n, s)) defEnv                     = [(sco, (t, n, filter (\(_,xv) -> xv /= Undef) s))]  -- if resource does not exist - create it
updateCat (c@(sco, (r, rn, rs)):cs) q@(n_sco, (t,n,s)) defEnv | r == t && rn == n = (sco, (r,rn, (updateAttri defEnv sco n_sco rs s))):cs
                                                              | otherwise         = c:(updateCat cs q defEnv)

update1Attri :: DefEnv -> Scope -> Scope -> [(Attri, Value)] -> (Attri, Value) -> [(Attri, Value)]
update1Attri _ sco n_sco [] (xa, xv) =
    if sco == n_sco then if xv == Undef then [] else [(xa, xv)]
    else error ("Resource argument (" ++ show xa ++ ") can only be added in the following scope " ++ show sco)
update1Attri defEnv sco n_sco (r@(ra, rv):rs) (xa, xv) | ra == xa  =
    if childof defEnv n_sco sco  then if xv == Undef then rs else (ra, xv):rs 
    else error "Can only override resource parameters in classes inheriting from the class adding the resource"
                                                       | otherwise = r:(update1Attri defEnv sco n_sco rs (xa, xv))
 
updateAttri :: DefEnv -> Scope -> Scope -> [(Attri, Value)] -> [(Attri, Value)] -> [(Attri, Value)]
updateAttri defEnv _ _ rs []           = rs
updateAttri defEnv sco n_sco rs (s:ss) = updateAttri defEnv sco n_sco (update1Attri defEnv sco n_sco rs s) ss

scopedCatToCat :: ScopedCatalog -> Catalog
scopedCatToCat []            = []
scopedCatToCat ((_, cv):scv) = cv : scopedCatToCat scv
